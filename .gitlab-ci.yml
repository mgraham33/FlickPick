# Example  .gitlab-ci.yml file
stages:
  - maventry
  - androidtry
  - mavenbuild
  - maventest
  - androidbuild
  - androidtest
  - mavenDeploy

maven-build:   #this is a JOB
  stage: maventry
  tags:
    - springboot_tag					# this is LINK to the shell runner on the remote-server 
  script:
    - cd Backend/SQL/tutorials-springboot_unit2_1_onetoone_mysql/springboot_example	#change directory to where you have your springboot application
    - mvn package

maven-build-new:   #this is a JOB
  stage: mavenbuild
  tags:
    - springboot_tag					# this is LINK to the shell runner on the remote-server 
  script:
    - cd Backend/SQL/tutorials-springboot_unit2_1_onetoone_mysql/springboot_example	#change directory to where you have your springboot application
    - mvn package

maven-test:
  stage: maventest
  tags:
    - springboot_tag
  script:
    - cd Backend/SQL/tutorials-springboot_unit2_1_onetoone_mysql/springboot_example
    - mvn test
  artifacts:
    paths:
      - Backend/SQL/tutorials-springboot_unit2_1_onetoone_mysql/springboot_example/target/*.jar

maven-test-new:
  stage: maventest
  tags:
    - springboot_tag
  script:
    - cd Backend/SQL/tutorials-springboot_unit2_1_onetoone_mysql/springboot_example
    - mvn test
  artifacts:
    paths:
      - Backend/SQL/tutorials-springboot_unit2_1_onetoone_mysql/springboot_example/target/*.jar

autoDeploy:
  stage: mavenDeploy  #do make a stage with same name!
  tags:
   - springboot_tag
  script:
    - cd Backend/SQL/tutorials-springboot_unit2_1_onetoone_mysql/springboot_example
    - mvn package
    - sudo mv target/*.jar /target/web-demo.jar 
    - sudo systemctl stop system-web-demo
    - sudo systemctl start system-web-demo
  only:
    refs:
      - main
    changes:
      - Backend/**/*

android-build: #this is another job
  image:  gjandres/android-ci:latest      		# this is a directive to DOCKER
  stage: androidbuild
  tags:
   - android_tag         					#this is LINK to the docker runner on the remote-server        
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x Frontend/Application/gradlew	#change directory to where you have ‘gradlew’ in your android directory
  script:
    - cd Frontend/Application					#change directory to where you have your android application
    - ./gradlew build
  artifacts:
    paths:
      - Android_test/app/build/outputs/

android-test:
  image: gjandres/android-ci:latest
  stage: androidtest
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./Frontend/Application/gradlew
  tags:
    - android_tag
  script:
    - cd Frontend/Application
    - ./gradlew test

android-build-new: #this is another job
  image:  gjandres/android-ci:latest      		# this is a directive to DOCKER
  stage: androidtry
  tags:
   - android_tag         					#this is LINK to the docker runner on the remote-server        
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x Frontend/Application/gradlew	#change directory to where you have ‘gradlew’ in your android directory
  script:
    - cd Frontend/Application					#change directory to where you have your android application
    - ./gradlew assemble

